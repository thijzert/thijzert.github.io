
var fs = require("fs");
var assert = require("chai").assert;

var ffsrequire = function()
{
	var filename = arguments[0];
	var module = "module.exports = ";

	for ( var i = 0; i < arguments.length; i++ )
	{
		module += fs.readFileSync( arguments[i], "utf8" );
	}

	fs.writeFileSync( "ffs-" + filename, module );
	var rv = require( "../ffs-" + filename );
	fs.unlinkSync( "ffs-" + filename );

	return rv;
};

var Hanzipad = ffsrequire( "006-hanzipad.js" );

describe( "Hanzipad", function()
{
	it("should exist", function()
	{
		var sq = new Hanzipad();
		assert.exists(sq);
	});

	describe( "#fromAbs()", function()
	{
		var sq = new Hanzipad();

		sq.size = 300;
		sq.border = 100;

		it("should be the inverse of toAbs", function()
		{
			for ( var i = 0; i < 100; i++ )
			{
				var v1 = [
					(2*sq.border + sq.size)*Math.random(),
					(2*sq.border + sq.size)*Math.random()
				];
				var v2 = sq.toAbs(v1);
				var v3 = sq.fromAbs(v2);

				assert.closeTo( v3[0], v1[0], 0.1 );
				assert.closeTo( v3[1], v1[1], 0.1 );
			}
		});

		describe( "coordinates within the board", function()
		{
			it("should be within the unit square",function()
			{
				for ( var i = 0; i < 100; i++ )
				{
					var x = sq.border + sq.size*Math.random()
					var y = sq.border + sq.size*Math.random()

					var c = sq.fromAbs([x,y]);

					assert( c[0] >= 0 && c[0] <= 1 );
					assert( c[1] >= 0 && c[1] <= 1 );
				}
			});
		});
		describe( "coordinates outside the board", function()
		{
			it("should not be within the unit square",function()
			{
				for ( var i = 0; i < 100; i++ )
				{
					var x = (2*sq.border + sq.size)*Math.random()
					var y = (2*sq.border + sq.size)*Math.random()

					if ( (x > sq.border && (x-sq.border) <= sq.size)
						|| (y > sq.border && (y-sq.border) <= sq.size ) )
						continue;

					var c = sq.fromAbs([x,y]);
					assert( c[0] < 0 || c[0] > 1  ||  c[1] < 0 || c[1] > 1 );
				}
			});
		});
	});

	describe( "#toAbs()", function()
	{
		var sq = new Hanzipad();

		sq.size = 300;
		sq.border = 100;

		it("should be the inverse of fromAbs", function()
		{
			for ( var i = 0; i < 100; i++ )
			{
				var v1 = [
					5*Math.random() - 2,
					5*Math.random() - 2
				];
				var v2 = sq.toAbs(v1);
				var v3 = sq.fromAbs(v2);

				assert.closeTo( v3[0], v1[0], 0.001 );
				assert.closeTo( v3[1], v1[1], 0.001 );
			}
		});

		describe( "coordinates within the unit square", function()
		{
			it("should be within the board's coordinates",function()
			{
				for ( var i = 0; i < 100; i++ )
				{
					var x = Math.random()
					var y = Math.random()

					var c = sq.toAbs([x,y]);
					assert( c[0] >= sq.border && (c[0]-sq.border) <= sq.size
						&& c[1] >= sq.border && (c[1]-sq.border) <= sq.size )
				}
			});
		});
		describe( "coordinates outside the unit square", function()
		{
			it("should not be within the board",function()
			{
				for ( var i = 0; i < 100; i++ )
				{
					var x = 5*Math.random() - 2;
					var y = 5*Math.random() - 2;

					if ( ( x >= 0 && x <= 1 ) || ( y >= 0 && y <= 1 ) )
						continue;

					var c = sq.fromAbs([x,y]);
					assert( c[0] < 0 || c[0] > 1  ||  c[1] < 0 || c[1] > 1 );
				}
			});
		});
	});

	describe( "#chessSquare", function()
	{
		var sq = new Hanzipad();

		it("should return a valid square for points on the board", function()
		{
			for ( var i = 0; i < 10; i++ )
			{
				var x = Math.random();
				var y = Math.random();

				var s = sq.chessSquare(x, y);
				assert.exists(s);

				var s1 = s.substr(0,1);
				assert.oneOf( s1, ["A","B","C","D","E","F","G","H"] );

				var s2 = parseInt(s.substr(1),10);
				assert.isNumber(s2);
				assert.oneOf( s2, [1,2,3,4,5,6,7,8] );
			}
		});
		it("should not return suares for points not on the board",function()
		{
			for ( var i = 0; i < 100; i++ )
			{
				var x = 5*Math.random() - 2;
				var y = 5*Math.random() - 2;

				if ( ( x >= 0 && x <= 1 ) || ( y >= 0 && y <= 1 ) )
					continue;

				assert.notExists( sq.chessSquare( x, y ) );
			}
		});
	});


	describe( "#clockDirection", function()
	{
		describe( "cardinal directions should work", function()
		{
			var sq = new Hanzipad();

			// Unit circle in positive orientation will start at the right (3 o'clock) and move counterclockwise.
			var directions = ["c","b","a","l","k","j","i","h","g","f","e","d"]

			it("in the ideal case", function()
			{
				for ( var i = 0; i < 12; i++ )
				{
					var t = i * Math.PI/6;
					var x = Math.cos(t);
					var y = Math.sin(t);

					assert.equal( sq.clockDirection([0,0], [x,y]), directions[i] );
				}
			});

			it("even when it's a bit fuzzy", function()
			{
				for ( var i = 0; i < 144; i++ )
				{
					var t = i * Math.PI/6 + (Math.random()-0.5)*Math.PI/6;
					var x = Math.cos(t);
					var y = Math.sin(t);

					assert.equal( sq.clockDirection([0,0], [x,y]), directions[i % 12] );
				}
			});
		});
	});


	describe("#getStrokeCode()", function()
	{
		// Might want to turn off text wrapping
		var hao3abs = [
			{ "code": "B8gd", "paint": [[136.7621641439271,123.35410883569895],[138.10296967474991,124.69491436652176],[138.10296967474991,128.7173309589902],[138.10296967474991,136.09176137851568],[138.10296967474991,145.4774000942754],[136.09176137851568,156.2038443408579],[126.03571989734458,185.0311632535484],[119.3316922432305,200.4504268580108],[111.95726182370502,213.85848216623893],[107.26444246582517,224.58492641282146],[101.90122034253392,233.97056512858114],[97.87880375006547,242.01539831351803],[95.86759545383124,246.0378149059865],[96.53799821924265,246.7082176713979],[99.89001204629969,247.37862043680929],[110.6164562928822,249.38982873304352],[113.29806735452783,250.06023149845493],[123.35410883569895,253.41224532551198],[128.0469281935788,256.0938563871576],[134.08055308228145,259.4458702142146],[138.10296967474991,262.12748127586025],[140.11417797098412,263.46828680668307],[142.12538626721835,264.8090923375059],[146.8182056250982,268.1611061645629],[148.159011155921,269.50191169538573],[148.82941392133242,270.17231446079717]] },
			{ "code": "C4g", "paint": [[171.62310794532027,204.47284345047922],[171.62310794532027,206.48405174671345],[169.61189964908604,212.5176766354161],[166.93028858744043,218.55130152411877],[163.57827476038338,225.92573194364425],[157.54464987168072,234.64096789399255],[150.84062221756665,244.02660660975226],[138.77337244016132,258.7754674488032],[132.06934478604725,266.8203006337401],[127.37652542816738,274.865133818677],[123.35410883569895,279.55795317655685],[120.0020950086419,282.9099670036139],[117.32048394699628,285.5915780652595],[115.30927565076206,287.6027863614937]] },
			{ "code": "A5c", "paint": [[101.90122034253392,194.41680196930812],[103.24202587335672,194.41680196930812],[107.26444246582517,194.41680196930812],[119.3316922432305,194.41680196930812],[130.72853925522443,194.41680196930812],[143.46619179804117,194.41680196930812],[154.86303881003508,194.41680196930812],[163.57827476038338,194.41680196930812],[166.25988582202902,194.41680196930812]] },
			{ "code": "D8cg", "paint": [[191.73519090766248,123.35410883569895],[192.4055936730739,123.35410883569895],[195.75760750013094,123.35410883569895],[205.14324621589063,123.35410883569895],[218.55130152411877,125.36531713193317],[229.9481485361127,126.70612266275599],[242.01539831351803,129.3877337244016],[250.73063426386634,130.05813648981302],[257.4346619179804,130.05813648981302],[260.11627297962605,130.05813648981302],[264.8090923375059,130.05813648981302],[266.1498978683287,130.05813648981302],[266.8203006337401,130.05813648981302],[268.1611061645629,130.05813648981302],[269.50191169538573,130.05813648981302],[270.84271722620855,130.72853925522443],[271.51311999162,130.72853925522443],[272.18352275703137,131.39894202063584],[270.17231446079717,134.08055308228145],[267.4907033991515,136.7621641439271],[263.46828680668307,140.11417797098412],[256.764259152569,146.8182056250982],[254.75305085633477,149.49981668674383],[252.74184256010057,151.51102498297806],[250.06023149845493,154.86303881003508],[249.38982873304352,155.5334415754465],[248.0490232022207,156.8742471062693],[247.37862043680929,157.54464987168072],[246.0378149059865,158.88545540250354],[244.69700937516367,159.55585816791495],[241.34499554810662,160.89666369873777],[238.663384486461,162.90787199497197],[237.3225789556382,163.57827476038338],[235.31137065940396,164.9190802912062],[233.97056512858114,166.25988582202902]] },
			{ "code": "F6fi", "paint": [[234.64096789399255,168.94149688367463],[234.64096789399255,174.3047190069659],[234.64096789399255,180.33834389566857],[234.64096789399255,193.74639920389671],[234.64096789399255,200.4504268580108],[234.64096789399255,209.8360655737705],[233.30016236316973,229.2777457707013],[231.95935683234694,239.33378725187242],[231.28895406693553,248.0490232022207],[231.28895406693553,254.75305085633477],[231.95935683234694,269.50191169538573],[232.62975959775832,274.19473105326557],[233.97056512858114,276.20593934949983],[234.64096789399255,278.8875504111454],[235.31137065940396,280.89875870737967],[235.31137065940396,282.2395642382025],[235.31137065940396,282.9099670036139],[235.31137065940396,284.2507725344367],[235.31137065940396,284.92117529984813],[234.64096789399255,285.5915780652595],[231.28895406693553,285.5915780652595],[227.93694023987848,285.5915780652595],[221.2329125857644,285.5915780652595],[217.8808987587074,285.5915780652595],[213.85848216623893,284.92117529984813],[210.5064683391819,284.2507725344367],[209.1656628083591,284.2507725344367],[208.49526004294768,284.2507725344367]] },
			{ "code": "D5c", "paint": [[192.4055936730739,193.0759964384853],[193.0759964384853,193.0759964384853],[198.43921856177656,193.0759964384853],[207.15445451212486,193.0759964384853],[231.95935683234694,193.0759964384853],[242.68580107892944,193.0759964384853],[256.764259152569,193.0759964384853],[268.1611061645629,193.0759964384853],[272.18352275703137,193.0759964384853],[276.20593934949983,193.0759964384853],[284.2507725344367,193.0759964384853],[286.2619808306709,193.74639920389671]] }
		];

		it("should classify the strokes in '好'", function()
		{
			var sq = new Hanzipad();
			sq.size = 200;
			sq.border = 100;

			for ( var i = 0; i < hao3abs.length; i++ )
			{
				var tc = hao3abs[i];

				// These paint strokes still have absolute coordinates
				for ( var j = 0; j < tc.paint.length; j++ )
					tc.paint[j] = sq.fromAbs(tc.paint[j]);

				assert.equal( sq.getStrokeCode( tc.paint ), tc.code );
			}
		});
	});
});

